// js/checkout.js
import { apiGet, apiPost, apiPut } from "./api.js";
import { getCart } from "./cart.js";

const checkoutBtn = document.getElementById("checkout-btn");
const CART_KEY = "susan_shop_cart";

/**
 * H√†m x·ª≠ l√Ω thanh to√°n th·ª±c t·∫ø
 */
async function handleCheckout() {
  try {
    const cart = getCart();
    if (cart.length === 0) {
      alert("Gi·ªè h√†ng c·ªßa b·∫°n ƒëang tr·ªëng!");
      return;
    }

    // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng hi·ªán t·∫°i (n·∫øu c√≥)
    const currentUser = JSON.parse(localStorage.getItem("currentUser"));
    if (!currentUser || !currentUser.id) {
      alert("Vui l√≤ng ƒëƒÉng nh·∫≠p tr∆∞·ªõc khi thanh to√°n!");
      return;
    }

    // 1Ô∏è‚É£ T·∫°o ƒë∆°n h√†ng m·ªõi
    const newOrder = await apiPost("orders", {
      user_id: currentUser.id,
      created_date: new Date().toISOString(),
      status: "completed",
    });

    // 2Ô∏è‚É£ L∆∞u t·ª´ng s·∫£n ph·∫©m v√†o order_details v√† 3Ô∏è‚É£ Gi·∫£m t·ªìn kho
    for (const item of cart) {
      // X√°c ƒë·ªãnh product_id cho order_details
      const productId = item.product_id || item.id; 

      await apiPost("order_details", {
        order_id: newOrder.id,
        product_id: productId,
        quantity: item.quantity,
        unit_price: item.price,
      });

      // 3Ô∏è‚É£ Gi·∫£m t·ªìn kho (S·ª¨A L·ªñI: d√πng item.variantId)
      const variantId = item.variantId; 
      const quantityToDeduct = Number(item.quantity); 

      if (variantId) {
        try {
            // T·ªìn kho ƒë∆∞·ª£c l∆∞u t·∫°i endpoint product_variants
            const resourceEndpoint = "product_variants";
            const resourceId = variantId;

            // 3.1. L·∫•y th√¥ng tin t·ªìn kho hi·ªán t·∫°i
            const variant = await apiGet(`${resourceEndpoint}/${resourceId}`);
            const currentQuantity = Number(variant.quantity);

            // 3.2. T√≠nh to√°n s·ªë l∆∞·ª£ng m·ªõi (kh√¥ng ƒë·ªÉ √¢m)
            if (typeof currentQuantity === 'number') {
                const updatedQuantity = Math.max(currentQuantity - quantityToDeduct, 0);

                // 3.3. C·∫≠p nh·∫≠t t·ªìn kho m·ªõi l√™n API (Ghi v√†o database)
                await apiPut(`${resourceEndpoint}/${resourceId}`, {
                    ...variant,
                    quantity: updatedQuantity,
                });
            } else {
                 console.warn(`C·∫£nh b√°o: Kh√¥ng t√¨m th·∫•y tr∆∞·ªùng 'quantity' cho bi·∫øn th·ªÉ ID ${variantId}. B·ªè qua tr·ª´ t·ªìn kho.`);
            }
        } catch (error) {
            console.error(`L·ªói nghi√™m tr·ªçng: Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t t·ªìn kho cho Variant ID ${variantId}. Ki·ªÉm tra API json-server.`, error);
        }
      } else {
        // C·∫£nh b√°o: L·ªói n√†y kh√¥ng n√™n x·∫£y ra sau khi fix db.json
        console.warn(`S·∫£n ph·∫©m ${item.name || 'kh√¥ng t√™n'} kh√¥ng c√≥ Variant ID, b·ªè qua b∆∞·ªõc tr·ª´ t·ªìn kho.`);
      }
    }

    // 4Ô∏è‚É£ X√≥a gi·ªè h√†ng sau khi thanh to√°n
    localStorage.removeItem(CART_KEY);

    // 5Ô∏è‚É£ Th√¥ng b√°o th√†nh c√¥ng v√† chuy·ªÉn h∆∞·ªõng
    alert("üéâ Thanh to√°n th√†nh c√¥ng! T·ªìn kho ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t.");
    window.location.href = "index.html";
  } catch (err) {
    console.error("L·ªói trong qu√° tr√¨nh thanh to√°n:", err);
    alert("‚ùå C√≥ l·ªói x·∫£y ra khi thanh to√°n. Vui l√≤ng ki·ªÉm tra console.");
  }
}

// G·∫Øn s·ª± ki·ªán click cho n√∫t Thanh to√°n
if (checkoutBtn) {
  checkoutBtn.addEventListener("click", handleCheckout);
}